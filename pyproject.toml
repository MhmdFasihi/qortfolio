# Bitcoin Options Analytics Platform - Modern Python Project Configuration
# PEP 518/621 compliant project configuration

[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bitcoin-options-analytics"
version = "1.0.0"
description = "Professional Bitcoin Options Analytics Platform with Taylor Expansion PnL Analysis"
authors = [
    {name = "Mhmd Fasihi", email = "mhmd.fasihi1@gmail.com"}
]
maintainers = [
    {name = "Mhmd Fasihi", email = "mhmd.fasihi1@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
keywords = [
    "bitcoin", 
    "options", 
    "derivatives", 
    "quantitative-finance", 
    "black-scholes", 
    "greeks", 
    "pnl-analysis",
    "taylor-expansion",
    "cryptocurrency",
    "trading"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed"
]
requires-python = ">=3.9"

# Core dependencies (same as requirements.txt)
dependencies = [
    "pandas>=2.0.0,<3.0.0",
    "numpy>=1.24.0,<2.0.0",
    "scipy>=1.10.0,<2.0.0",
    "py_vollib>=1.0.1",
    "QuantLib-Python>=1.17,<1.32",
    "mibian>=0.1.3",
    "requests>=2.31.0,<3.0.0",
    "aiohttp>=3.8.0,<4.0.0",
    "matplotlib>=3.7.0,<4.0.0",
    "seaborn>=0.12.0,<1.0.0",
    "plotly>=5.17.0,<6.0.0",
    "streamlit>=1.28.0,<2.0.0",
    "pyyaml>=6.0,<7.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "click>=8.1.0,<9.0.0",
    "rich>=13.4.0,<14.0.0",
    "numba>=0.57.0,<1.0.0",
    "pydantic>=2.4.0,<3.0.0",
    "python-dateutil>=2.8.0,<3.0.0",
    "structlog>=23.1.0"
]

# Optional dependencies for different use cases
[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "black>=23.7.0,<24.0.0",
    "isort>=5.12.0,<6.0.0",
    "flake8>=6.0.0,<7.0.0",
    "mypy>=1.5.0,<2.0.0",
    "pre-commit>=3.3.0,<4.0.0",
    "jupyter>=1.0.0,<2.0.0",
    "jupyterlab>=4.0.0,<5.0.0"
]

# Machine learning features
ml = [
    "scikit-learn>=1.3.0,<2.0.0",
    "xgboost>=1.7.0,<2.0.0",
    "tensorflow>=2.13.0,<3.0.0",
    "torch>=2.0.0"
]

# Database and caching
database = [
    "sqlalchemy>=2.0.0,<3.0.0",
    "redis>=4.6.0,<5.0.0",
    "psycopg2-binary>=2.9.0,<3.0.0",
    "alembic>=1.11.0,<2.0.0"
]

# Crypto exchange connectivity
crypto = [
    "ccxt>=4.0.0",
    "python-binance>=1.0.19",
    "websocket-client>=1.6.0",
    "cryptofeed>=2.4.0"
]

# Documentation
docs = [
    "sphinx>=7.1.0,<8.0.0",
    "sphinx-rtd-theme>=1.3.0,<2.0.0",
    "sphinx-autoapi>=2.1.0,<3.0.0",
    "myst-parser>=2.0.0,<3.0.0"
]

# All optional dependencies
all = [
    "bitcoin-options-analytics[dev,ml,database,crypto,docs]"
]

[project.urls]
Homepage = "https://github.com/MhmdFasihi/BTC-Option_Deribit"
Documentation = "https://github.com/MhmdFasihi/BTC-Option_Deribit/wiki"
Repository = "https://github.com/MhmdFasihi/BTC-Option_Deribit.git"
Issues = "https://github.com/MhmdFasihi/BTC-Option_Deribit/issues"
Changelog = "https://github.com/MhmdFasihi/BTC-Option_Deribit/blob/main/CHANGELOG.md"

# Entry points for command-line interface
[project.scripts]
btc-options = "src.cli:main"
options-analyzer = "src.cli:analyzer_main"
pnl-simulator = "src.cli:pnl_main"

# Entry points for Streamlit dashboard
[project.gui-scripts]
options-dashboard = "dashboard.app:main"

# =============================================================================
# TOOL CONFIGURATIONS
# =============================================================================

# Black code formatter configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort import sorting configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "config", "tests"]
known_third_party = ["pandas", "numpy", "scipy", "matplotlib", "streamlit", "plotly"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy type checking configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "py_vollib.*",
    "QuantLib.*",
    "mibian.*",
    "ccxt.*",
    "cryptofeed.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=85"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests that require external API access",
    "expensive: marks tests that use significant computational resources"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py"
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linting configuration
[tool.bandit]
exclude_dirs = ["tests", "notebooks"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_other

# Setuptools configuration
[tool.setuptools]
packages = ["src"]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.yml", "*.yaml", "*.json", "*.toml"]

# Setuptools dynamic version
[tool.setuptools.dynamic]
version = {attr = "src.__version__"}